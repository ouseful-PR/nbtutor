(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.nbtutorNotebook = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function toShortString(type, value) {
    /**
     * Get a short string representation for an object type and value
     */
    // TODO Move this data to backend
    value = '' + value || 'unknown';
    var short_str = {
        'int': value.length > 3 ? 'INT' : value,
        'float': value.length > 3 ? 'FLT' : value,
        'str': value.length > 3 ? 'STR' : value,
        'bool': value[0].toUpperCase(),
        'none': 'NON',
        'complex': 'CPX',
        'module': 'MOD',
        'function': 'FNC',
        'lambda': 'FNC',
        'class': 'CLS',
        'list': 'LST',
        'tuple': 'TPL'
    };
    return short_str[type] || 'OBJ';
}

var FrameTimeline = exports.FrameTimeline = function () {
    function FrameTimeline(tracestep, frame, heap) {
        _classCallCheck(this, FrameTimeline);

        this.startstep = tracestep;
        this.tracestep = tracestep;
        this.name = frame.name;
        this.uuid = frame.uuid;
        this.vars = [];
        this.push(frame, heap);
    }

    _createClass(FrameTimeline, [{
        key: '_fill',
        value: function _fill() {
            /**
            * Fill timeline variable values up to the current trace step in the
            * history with an empty string. For example, if a variable is created
            * in trace step 4 all previous trace step values are filled with an
            * empty string.
            */
            var that = this;
            this.vars.map(function (object) {
                for (var t = object.values.length; t < that.tracestep; t++) {
                    object.values.push("");
                }
            });
        }
    }, {
        key: 'removeEmptyVars',
        value: function removeEmptyVars() {
            /**
             * Remove any timeline variables whos values are all empty strings.
             */
            var empty = [];
            this.vars.map(function (object, i) {
                if (object.values.every(function (val) {
                    return val === "";
                })) {
                    empty.push(i);
                }
            });

            var that = this;
            empty.sort(function (a, b) {
                return b - a;
            });
            empty.map(function (i) {
                that.vars.splice(i, 1);
            });
        }
    }, {
        key: 'getVarByName',
        value: function getVarByName(name) {
            /**
             * Get a single timeline variable that matched the specified name
             */
            var ind = this.vars.map(function (object) {
                return object.name;
            }).indexOf(name);
            return this.vars[ind];
        }
    }, {
        key: 'push',
        value: function push(frame, heap) {
            /**
             * Push a stack frame into the timeline. Values obtained from the heap
             */
            if (frame.uuid != this.uuid) {
                throw new Error("frame uuid mismatch!");
            }

            var that = this;
            frame.vars.map(function (ref) {
                var frame_var = that.getVarByName(ref.name);
                if (!frame_var) {
                    frame_var = { name: ref.name, values: [] };
                    that.vars.push(frame_var);
                    that._fill();
                }
                var ind = heap.map(function (object) {
                    return object.id;
                }).indexOf(ref.id);
                var object = heap[ind];
                var strval = toShortString(object.type, object.value);
                frame_var.values.push(strval);
            });
            this.tracestep += 1;
            this._fill();
        }
    }, {
        key: 'pop',
        value: function pop() {
            /**
             * Pop the last values for each of the timeline variables and remove
             * any empty variables
             */
            var popped = this.vars.map(function (object) {
                return { name: object.name };
            });

            var that = this;
            popped.map(function (object) {
                var frame_var = that.getVarByName(object.name);
                object.value = frame_var.values.pop();
            });

            this.removeEmptyVars();
            if (this.tracestep > 0) {
                this.tracestep -= 1;
            }
            return popped;
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty() {
            /**
             * True if the frame timeline has any variables, else false
             */
            return this.vars.length === 0;
        }
    }]);

    return FrameTimeline;
}();

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HeapHistory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HeapHistory = exports.HeapHistory = function () {
    function HeapHistory(data) {
        _classCallCheck(this, HeapHistory);

        this.data = data || [];
        this._setUUids();
    }

    _createClass(HeapHistory, [{
        key: "_setUUids",
        value: function _setUUids() {
            /**
             * Heap object ids may be unique for a given code cell, but may not be
             * unique for the entire notebook so we need to create unique ids.
             * Unique ids are needed for jsPlumb connectors.
             */
            var that = this;
            var object_ids = [];

            // Collect all unique heap object ids
            this.data.map(function (heap_objects) {
                heap_objects.map(function (object) {
                    if (object_ids.indexOf(object.id) < 0) {
                        object_ids.push(object.id);
                    }
                });
            });

            // Set heap object uuids
            object_ids.map(function (id) {
                // Make id identifier start with a letter, else d3 falls over
                var new_uuid = "h-" + _nbtutorDeps.uuid.v4();
                that.data.map(function (heap_objects) {
                    heap_objects.map(function (object) {
                        if (object.id === id) {
                            object.uuid = new_uuid;
                        }
                    });
                });
            });
        }
    }, {
        key: "getHeapObjects",
        value: function getHeapObjects(tracestep) {
            /*
             * Get the heap objects at a specified trace step in the history
             */
            return this.data[tracestep];
        }
    }, {
        key: "getObjectById",
        value: function getObjectById(tracestep, id) {
            /*
             * Get a single heap object at a specified trace step in the history
             * that matches a specified object id.
             */
            var objects = this.getHeapObjects(tracestep) || [];
            var ind = objects.map(function (d) {
                return d.id;
            }).indexOf(id);
            return objects[ind];
        }
    }]);

    return HeapHistory;
}();

},{"nbtutor-deps":"nbtutor-deps"}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OutputHistory = exports.OutputHistory = function () {
    function OutputHistory(data) {
        _classCallCheck(this, OutputHistory);

        this.data = data;
    }

    _createClass(OutputHistory, [{
        key: "getOutput",
        value: function getOutput(tracestep) {
            /*
             * Get the output at a specified trace step in the history
             */
            return this.data[tracestep];
        }
    }]);

    return OutputHistory;
}();

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StackHistory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StackHistory = exports.StackHistory = function () {
    function StackHistory(data) {
        _classCallCheck(this, StackHistory);

        this.data = data || [];
        this._setUUids();
    }

    _createClass(StackHistory, [{
        key: "_setUUids",
        value: function _setUUids() {
            /**
             * Frame and variable ids may be unique for a given code cell, but may
             * not be unique for the entire notebook so we need to create unique
             * ids. Unique ids are needed for the jsPlumb connectors and timeline
             * data.
             */
            var that = this;
            var frame_ids = [];

            // Collect all unique frame ids
            this.data.map(function (stack_frames) {
                stack_frames.map(function (frame) {
                    if (frame_ids.indexOf(frame.id) < 0) {
                        frame_ids.push(frame.id);
                    }
                });
            });

            // Set frame uuids
            frame_ids.map(function (id) {
                // Make id identifier start with a letter, else d3 falls over
                var new_uuid = "f-" + _nbtutorDeps.uuid.v4();
                that.data.map(function (stack_frames) {
                    stack_frames.map(function (frame) {
                        if (frame.id === id) {
                            frame.uuid = new_uuid;
                        }
                    });
                });
            });

            // Variable uuids can be completely unique. No need
            // to collect and carry uuids accross tracesteps
            this.data.map(function (stack_frames) {
                stack_frames.map(function (frame) {
                    frame.vars.map(function (ref) {
                        // Make id identifier start with a letter, else d3 falls over
                        ref.uuid = "v-" + _nbtutorDeps.uuid.v4();
                    });
                });
            });
        }
    }, {
        key: "getStackFrames",
        value: function getStackFrames(tracestep) {
            /*
             * Get the stack frames at a specified trace step in the history
             */
            return this.data[tracestep];
        }
    }, {
        key: "getFrameById",
        value: function getFrameById(tracestep, id) {
            /*
             * Get a single frame at a specified trace step in the history
             * that matches a specified frame id.
             */
            var frames = this.getStackFrames(tracestep) || [];
            var ind = frames.map(function (d) {
                return d.id;
            }).indexOf(id);
            return frames[ind];
        }
    }, {
        key: "getFrameVarByName",
        value: function getFrameVarByName(tracestep, frame_id, name) {
            /*
             * Get a single frame variable at a specified trace step in the history
             * that matches a specified frame id and variable name.
             */
            var frame = this.getFrameById(tracestep, frame_id) || [];
            var variables = frame.vars || [];
            var ind = frame.vars.map(function (d) {
                return d.name;
            }).indexOf(name);
            return variables[ind];
        }
    }, {
        key: "getFrameVarById",
        value: function getFrameVarById(tracestep, frame_id, id) {
            /*
             * Get a single frame variable at a specified trace step in the history
             * that matches a specified frame id and reference id.
             */
            var frame = this.getFrameById(tracestep, frame_id) || [];
            var variables = frame.vars || [];
            var ind = frame.vars.map(function (d) {
                return d.id;
            }).indexOf(id);
            return variables[ind];
        }
    }]);

    return StackHistory;
}();

},{"nbtutor-deps":"nbtutor-deps"}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StackTimeline = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _frame_timeline = require("./frame_timeline");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StackTimeline = exports.StackTimeline = function () {
    function StackTimeline() {
        _classCallCheck(this, StackTimeline);

        this.tracestep = 0;
        this.stack_frames = [];
    }

    _createClass(StackTimeline, [{
        key: "_fill",
        value: function _fill() {
            var that = this;
            this.stack_frames.map(function (frame) {
                frame.tracestep = that.tracestep;
                frame._fill();
            });
        }
    }, {
        key: "clear",
        value: function clear() {
            /*
             * Clear the stack timeline
             */
            this.tracestep = 0;
            this.stack_frames = [];
        }
    }, {
        key: "removeEmptyFrames",
        value: function removeEmptyFrames() {
            /*
             * Remove any frame that does not contain any variables
             */
            var empty = [];
            this.stack_frames.map(function (frame, i) {
                if (frame.isEmpty()) {
                    empty.push(i);
                }
            });

            var that = this;
            empty.sort(function (a, b) {
                return b - a;
            });
            empty.map(function (i) {
                that.stack_frames.splice(i, 1);
            });
        }
    }, {
        key: "push",
        value: function push(stack_frames, heap) {
            /*
             * Push all stack frames into the timeline. Values obtained from the
             * heap
             */
            var that = this;
            stack_frames.map(function (frame) {
                var found = false;
                for (var i = 0; i < that.stack_frames.length; i++) {
                    if (that.stack_frames[i].uuid === frame.uuid) {
                        that.stack_frames[i].push(frame, heap);
                        found = true;
                    }
                }
                if (!found) {
                    that.stack_frames.push(new _frame_timeline.FrameTimeline(that.tracestep, frame, heap));
                }
            });
            this.tracestep += 1;
            this._fill();
        }
    }, {
        key: "pop",
        value: function pop() {
            /*
             * Pop the last values for each of the timeline variables from every
             * stack frame and remove any empty variables and frame
             */
            var popped = [];
            if (this.tracestep > 0) {
                this.stack_frames.map(function (frame) {
                    popped.push({
                        frame: frame.name,
                        uuid: frame.uuid,
                        vars: frame.pop()
                    });
                });
                this.tracestep -= 1;
                this.removeEmptyFrames();
            }
            return popped;
        }
    }]);

    return StackTimeline;
}();

},{"./frame_timeline":1}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TraceHistory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-unused-vars: 0 */


var _nbtutorDeps = require("nbtutor-deps");

var _stack_history = require("./stack_history");

var _heap_history = require("./heap_history");

var _output_history = require("./output_history");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TraceHistory = exports.TraceHistory = function () {
    function TraceHistory(cell) {
        _classCallCheck(this, TraceHistory);

        this.cell = cell;
        this.tracesteps = 0;
        this.stack_history = null;
        this.heap_history = null;
        this.output_history = null;
    }

    _createClass(TraceHistory, [{
        key: "clear",
        value: function clear() {
            this.tracesteps = 0;
            this.stack_history = null;
            this.heap_history = null;
            this.output_history = null;
        }
    }, {
        key: "getLineNumbers",
        value: function getLineNumbers(tracestep) {
            var curstack = this.stack_history.getStackFrames(tracestep) || [];
            var prevstack = this.stack_history.getStackFrames(tracestep - 1) || [];
            var prevframe = prevstack[prevstack.length - 1] || {};

            var prevLines = [+(prevframe.lineno || 0)];
            var curLines = curstack.map(function (frame) {
                return +frame.lineno;
            });
            var nextLine = curLines.pop();

            if (prevframe.event === "return") {
                var frame = prevstack[prevstack.length - 2] || {};
                prevLines.push(+(frame.lineno || 0));
            }

            if (tracestep == this.stack_history.data.length - 1) {
                nextLine = 0;
            }

            return {
                prevLines: prevLines,
                curLines: curLines,
                nextLine: nextLine
            };
        }
    }, {
        key: "updateData",
        value: function updateData(history) {
            /**
             * Update data from history
             */
            this.stack_history = new _stack_history.StackHistory(history.stack_history);
            this.heap_history = new _heap_history.HeapHistory(history.heap_history);
            this.output_history = new _output_history.OutputHistory(history.output_history);
            this.tracesteps = history.stack_history.length;
        }
    }]);

    return TraceHistory;
}();

},{"./heap_history":2,"./output_history":3,"./stack_history":4,"nbtutor-deps":"nbtutor-deps"}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GutterMarkers = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-unused-vars: 0 */


var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GutterMarkers = exports.GutterMarkers = function () {
    function GutterMarkers(cell) {
        _classCallCheck(this, GutterMarkers);

        this.codemirror = cell.code_mirror;
        this.codemirror.setOption('lineNumbers', true);
        this.$root = cell.element.find(".inner_cell");
        this.$legend = (0, _nbtutorDeps.$)("<div/>").addClass("nbtutor-hidden").addClass("nbtutor-legend");

        // Create codemirror gutter id for nbtutor
        var gutters = this.codemirror.options.gutters;
        if (gutters.indexOf("nbtutor-linemarkers") < 0) {
            gutters.push("nbtutor-linemarkers");
        }

        // Build the legend elements
        this._build_legend();
    }

    _createClass(GutterMarkers, [{
        key: "_build_legend",
        value: function _build_legend() {
            var $prevLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-prev-line");
            var $curLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-current-line");
            var $nextLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-next-line");

            this.$legend.append((0, _nbtutorDeps.$)("<p/>").append($prevLineMarker).append((0, _nbtutorDeps.$)("<span/>").text("Previous line")));
            this.$legend.append((0, _nbtutorDeps.$)("<p/>").append($nextLineMarker).append((0, _nbtutorDeps.$)("<span/>").text("Next line")));
            this.$legend.append((0, _nbtutorDeps.$)("<p/>").append($curLineMarker).append((0, _nbtutorDeps.$)("<span/>").text("Waiting for next frame")));

            this.$root.append(this.$legend);
        }
    }, {
        key: "setMarkers",
        value: function setMarkers(lineNumbers) {
            // First clear current gutter markers
            this.codemirror.clearGutter("nbtutor-linemarkers");

            var prevLines = lineNumbers.prevLines;
            var curLines = lineNumbers.curLines;
            var nextLine = lineNumbers.nextLine;

            // Update CodeMirror line markers
            var that = this;
            curLines.map(function (line) {
                var $curLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-current-line");
                if (line - 1 >= 0) {
                    that.codemirror.setGutterMarker(line - 1, "nbtutor-linemarkers", $curLineMarker.toArray()[0]);
                }
            });

            prevLines.map(function (line) {
                var $prevLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-prev-line");
                if (line - 1 >= 0) {
                    that.codemirror.setGutterMarker(line - 1, "nbtutor-linemarkers", $prevLineMarker.toArray()[0]);
                }
            });

            var $nextLineMarker = (0, _nbtutorDeps.$)("<i/>").attr("class", "fa fa-long-arrow-right fa-lg").addClass("nbtutor-next-line");
            if (nextLine - 1 >= 0) {
                this.codemirror.setGutterMarker(nextLine - 1, "nbtutor-linemarkers", $nextLineMarker.toArray()[0]);
            }
        }
    }, {
        key: "showLegend",
        value: function showLegend() {
            this.$legend.removeClass("nbtutor-hidden");
        }
    }, {
        key: "hideLegend",
        value: function hideLegend() {
            this.$legend.addClass("nbtutor-hidden");
        }
    }, {
        key: "clearMarkers",
        value: function clearMarkers() {
            this.codemirror.clearGutter("nbtutor-linemarkers");
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.clearMarkers();
            this.$legend.remove();
        }
    }]);

    return GutterMarkers;
}();

},{"nbtutor-deps":"nbtutor-deps"}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VisualizedCell = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nbtutorDeps = require("nbtutor-deps");

var _toolbar = require("./toolbar");

var _gutters = require("./gutters");

var _trace_history = require("../data/trace_history");

var _stack_timeline = require("../data/stack_timeline");

var _html_memory = require("../render/html_memory");

var _html_timeline = require("../render/html_timeline");

var _dialog = require("base/js/dialog");

var _dialog2 = _interopRequireDefault(_dialog);

var _events = require("base/js/events");

var _events2 = _interopRequireDefault(_events);

var _namespace = require("base/js/namespace");

var _namespace2 = _interopRequireDefault(_namespace);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function alertUserMissingData() {
    var msg = (0, _nbtutorDeps.$)("<p/>").text("No visualization data was found for this cell. " + "Please include the following magic at the start " + "of the cell and run the code again:").append((0, _nbtutorDeps.$)("<pre/>").text("%%nbtutor"));

    _dialog2.default.modal({
        notebook: _namespace2.default.notebook,
        keyboard_manager: _namespace2.default.notebook.keyboard_manager,
        title: "Missing Visualization Data",
        body: msg,
        buttons: {
            OK: {}
        }
    });
}

var VisualizedCell = exports.VisualizedCell = function () {
    function VisualizedCell(cell) {
        _classCallCheck(this, VisualizedCell);

        this.tracestep = 0;
        this.trace_history = new _trace_history.TraceHistory(cell);
        this.stack_timeline = new _stack_timeline.StackTimeline();

        this.cell = cell;
        this.codemirror = cell.code_mirror;
        this.output_area = this.cell.output_area;

        this.$input_area = cell.element.find(".input_area").addClass("nbtutor-input-area");
        this.$nbtutor_canvas = (0, _nbtutorDeps.$)("<div/>").attr("class", "nbtutor-canvas").attr("id", "c-" + _nbtutorDeps.uuid.v4()).addClass("nbtutor-hidden");
        this.d3Root = _nbtutorDeps.d3.select(this.$nbtutor_canvas.toArray()[0]);

        this.toolbar = new _toolbar.Toolbar(cell);
        this.markers = new _gutters.GutterMarkers(cell);
        this.memoryUI = new _html_memory.MemoryModelUI(this.trace_history, this.d3Root);
        this.timelineUI = new _html_timeline.TimelineUI(this.stack_timeline, this.d3Root);

        // Build the UI elements
        this._build();
    }

    _createClass(VisualizedCell, [{
        key: "_checkData",
        value: function _checkData() {
            // Alert if no data
            if (!this.trace_history || !this.trace_history.stack_history) {
                this.toolbar.$select_view.val("none").trigger("change");
                alertUserMissingData();
            }
        }
    }, {
        key: "_bindButtons",
        value: function _bindButtons() {
            var _this = this;

            var that = this;

            this.toolbar.$btn_first.on("click", function () {
                var stack_history = _this.trace_history.stack_history;
                var heap_history = _this.trace_history.heap_history;

                that._checkData();
                that.tracestep = 0;
                that.stack_timeline.clear();
                that.stack_timeline.push(stack_history.getStackFrames(that.tracestep), heap_history.getHeapObjects(that.tracestep));
                that.visualize();
            });

            this.toolbar.$btn_prev.on("click", function () {
                if (that.tracestep > 0) {
                    that._checkData();
                    that.tracestep -= 1;
                    that.stack_timeline.pop();
                    that.visualize();
                }
            });

            this.toolbar.$btn_next.on("click", function () {
                if (that.tracestep < that.trace_history.tracesteps - 1) {
                    var stack_history = _this.trace_history.stack_history;
                    var heap_history = _this.trace_history.heap_history;

                    that._checkData();
                    that.tracestep += 1;
                    that.stack_timeline.push(stack_history.getStackFrames(that.tracestep), heap_history.getHeapObjects(that.tracestep));
                    that.visualize();
                }
            });

            this.toolbar.$btn_last.on("click", function () {
                var stack_history = _this.trace_history.stack_history;
                var heap_history = _this.trace_history.heap_history;

                that._checkData();
                that.stack_timeline.clear();
                that.tracestep = that.trace_history.tracesteps - 1;
                for (var tracestep = 0; tracestep < that.tracestep + 1; tracestep++) {
                    that.stack_timeline.push(stack_history.getStackFrames(tracestep), heap_history.getHeapObjects(tracestep));
                }
                that.visualize();
            });
        }
    }, {
        key: "_build",
        value: function _build() {
            this._bindButtons();
            this.$input_area.append(this.$nbtutor_canvas);

            var that = this;
            _events2.default.on("global_hide.CellToolBar", function () {
                that.destroy();
            });

            this.toolbar.$select_view.on("change", function () {
                that.memoryUI.destroy();
                var render_view = (0, _nbtutorDeps.$)(this).val();
                if (render_view == "none") {
                    that.markers.clearMarkers();
                    that.markers.hideLegend();
                    that.$nbtutor_canvas.addClass("nbtutor-hidden");
                } else {
                    that.markers.showLegend();
                    that.$nbtutor_canvas.removeClass("nbtutor-hidden");
                    that.toolbar.$btn_first.trigger("click");
                }
            });

            this.codemirror.on("change", function () {
                that.markers.clearMarkers();
                that.toolbar.$select_view.val("none").trigger("change");
                that.trace_history.clear();
            });
        }
    }, {
        key: "visualize",
        value: function visualize() {
            // visualize code execution
            var render_view = this.toolbar.$select_view.val();
            if (render_view == "memory") {
                this.memoryUI.create(this.tracestep);
            }
            if (render_view == "timeline") {
                this.timelineUI.create();
            }

            // Add CodeMirror line markers
            var lineNumbers = this.trace_history.getLineNumbers(this.tracestep);
            this.markers.setMarkers(lineNumbers);

            // Manage cell output
            var output_history = this.trace_history.output_history;
            this.output_area.clear_output();
            this.output_area.handle_output({
                header: { msg_type: "stream" },
                content: {
                    name: "nbtutor",
                    text: output_history.getOutput(this.tracestep)
                }
            });
        }
    }, {
        key: "updateData",
        value: function updateData(data) {
            this.output_area.clear_output();
            this.trace_history.updateData(data);
            this.toolbar.$select_view.val("memory").trigger("change");
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.$nbtutor_canvas.remove();
            this.markers.destroy();
            this.toolbar.destroy();
            this.cell.nbtutor = null;
        }
    }]);

    return VisualizedCell;
}();

},{"../data/stack_timeline":5,"../data/trace_history":6,"../render/html_memory":10,"../render/html_timeline":11,"./gutters":7,"./toolbar":9,"base/js/dialog":"base/js/dialog","base/js/events":"base/js/events","base/js/namespace":"base/js/namespace","nbtutor-deps":"nbtutor-deps"}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Toolbar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-unused-vars: 0 */


var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Toolbar = exports.Toolbar = function () {
    function Toolbar(cell) {
        _classCallCheck(this, Toolbar);

        this.$root = cell.celltoolbar.element.find(".button_container");
        this.$btn_first = (0, _nbtutorDeps.$)("<button/>").text("<< First Line");
        this.$btn_prev = (0, _nbtutorDeps.$)("<button/>").text("< Prev");
        this.$btn_next = (0, _nbtutorDeps.$)("<button/>").text("Next >");
        this.$btn_last = (0, _nbtutorDeps.$)("<button/>").text("Last Line >>");
        this.$select_view = (0, _nbtutorDeps.$)("<select/>");

        // Build the UI elements
        this._build();
    }

    _createClass(Toolbar, [{
        key: "_build",
        value: function _build() {
            var _this = this;

            if (this.$root.hasClass("nbtutor-buttons")) {
                this.destroy();
            }
            this.$root.addClass("nbtutor-buttons");
            this.$root.append(this.$btn_first);
            this.$root.append(this.$btn_prev);
            this.$root.append(this.$btn_next);
            this.$root.append(this.$btn_last);
            this.$root.children("button").attr("type", "button").addClass("nbtutor-hidden");
            this.$root.append(this.$select_view);

            this.$select_view.append((0, _nbtutorDeps.$)('<option/>').attr("value", "none").text("-"));
            this.$select_view.append((0, _nbtutorDeps.$)('<option/>').attr("value", "memory").text("Memory"));
            this.$select_view.append((0, _nbtutorDeps.$)('<option/>').attr("value", "timeline").text("Timeline"));

            var that = this;
            this.$select_view.change(function () {
                var render_view = _this.$select_view.val();
                if (render_view === "none") {
                    _this.hideButtons();
                } else {
                    _this.showButtons();
                }
            });
        }
    }, {
        key: "showButtons",
        value: function showButtons() {
            this.$root.children("button").removeClass("nbtutor-hidden");
        }
    }, {
        key: "hideButtons",
        value: function hideButtons() {
            this.$root.children("button").addClass("nbtutor-hidden");
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.$root.empty();
        }
    }]);

    return Toolbar;
}();

},{"nbtutor-deps":"nbtutor-deps"}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemoryModelUI = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-unused-vars: 0 */


var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MemoryModelUI = exports.MemoryModelUI = function () {
    function MemoryModelUI(trace_history, d3Root) {
        _classCallCheck(this, MemoryModelUI);

        this.trace_history = trace_history;
        this.d3Root = d3Root;
        this.connectors = [];
        this.objects_rendered = [];
        this.jsplumb = _nbtutorDeps.jsplumb.getInstance({
            Container: this.d3Root[0]
        });
    }

    _createClass(MemoryModelUI, [{
        key: "_setHover",
        value: function _setHover(cls, state) {
            _nbtutorDeps.d3.select(".nbtutor-var-object." + cls).select(".nbtutor-var-value").classed("nbtutor-hover", state);
            _nbtutorDeps.d3.select(".nbtutor-var-object." + cls).select("table").classed("nbtutor-hover", state);
            _nbtutorDeps.d3.selectAll("svg." + cls).classed("jtk-hover", state);
            _nbtutorDeps.d3.selectAll("path." + cls).classed("jtk-hover", state);
        }
    }, {
        key: "_connectObjects",
        value: function _connectObjects() {
            var _this = this;

            var that = this;
            this.connectors.map(function (con) {
                var stateMachineConnector = {
                    paintStyle: { lineWidth: 2, stroke: "#056" },
                    endpoint: "Blank",
                    anchors: ["Right", "Left"],
                    connector: ["Bezier", { "curviness": 80 }],
                    detachable: false,
                    overlays: [["Arrow", { length: 10, width: 10, location: 1 }]]
                };
                stateMachineConnector.cssClass = con.from;
                stateMachineConnector.overlays[0][1].cssClass = con.from;
                if (con.from[0] == 'r') {
                    stateMachineConnector.anchors = ["Top", ["Left", "Right"]];
                }

                _nbtutorDeps.d3.select("#" + con.to).classed(con.from, true);
                _this.jsplumb.connect({
                    source: con.from,
                    target: con.to
                }, stateMachineConnector);
            });
        }
    }, {
        key: "_createHeapDiv",
        value: function _createHeapDiv(object) {
            var position = object.options.position || 'right';
            var d3Obj = this.d3Root.select(".nbtutor-heap").append("div").attr("class", "nbtutor-heap-row-" + position).append("div").attr("class", "nbtutor-var-object").attr("id", object.uuid);
            return d3Obj;
        }
    }, {
        key: "_createPrimitive",
        value: function _createPrimitive(object) {
            var d3Obj = this._createHeapDiv(object);
            d3Obj.append("div").attr("class", "nbtutor-var-type").text(object.type);
            d3Obj.append("div").attr("class", "nbtutor-var-value").text(object.value);
        }
    }, {
        key: "_createSequence",
        value: function _createSequence(object, tracestep) {
            var that = this;
            var heap_history = this.trace_history.heap_history;
            object.values.map(function (obj) {
                var child = heap_history.getObjectById(tracestep, obj.id);
                if (!object.options.inline || child.catagory != 'primitive') {
                    obj.uuid = 'r-' + _nbtutorDeps.uuid.v4();
                    that._createObject(child, tracestep);
                    that.connectors.push({
                        from: obj.uuid,
                        to: child.uuid
                    });
                }
            });

            var d3Obj = this._createHeapDiv(object);
            d3Obj.append("div").attr("class", "nbtutor-var-type").text(object.type);

            var d3Table = d3Obj.append("table").attr("class", "nbtutor-seq-" + object.type);
            var d3IndRow = d3Table.append("tr");
            var d3ValRow = d3Table.append("tr");

            // Create sequence index numbers
            var indexes = [];
            for (var i = 0; i < object.values.length; i++) {
                indexes.push(i);
            }

            // Add an ellipsis to the end of a long sequence
            var ind = object.values.length - 1;
            if (object.options.ellipsis) {
                if (object.values[ind] === '...') {
                    indexes[ind] = "...";
                } else {
                    indexes.push("...");
                    object.values.push("...");
                }
            }

            // Add index numbers
            d3IndRow.selectAll("td").data(indexes).enter().append("td").attr("class", "nbtutor-var-index").text(function (d) {
                return d;
            });

            // Add sequence anchors
            var d3Refs = d3ValRow.selectAll("td").data(object.values).enter().append("td").attr("class", "nbtutor-anchor-from");

            d3Refs.append("div").each(function (d) {
                if (object.options.ellipsis && d === "...") {
                    _nbtutorDeps.d3.select(this).text("...");
                } else {
                    var child = heap_history.getObjectById(tracestep, d.id);
                    if (object.options.inline && child.catagory === 'primitive') {
                        _nbtutorDeps.d3.select(this).text(child.value);
                    } else {
                        _nbtutorDeps.d3.select(this).attr("id", function (d) {
                            return d.uuid;
                        });
                    }
                }
            });

            // Toggle mouse hover over ref
            d3Refs.on('mouseover', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", true);
                that._setHover(d.uuid, true);
            });
            d3Refs.on('mouseout', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", false);
                that._setHover(d.uuid, false);
            });
        }
    }, {
        key: "_createArray",
        value: function _createArray(object, tracestep) {
            var d3Obj = this._createHeapDiv(object);
            d3Obj.append("div").attr("class", "nbtutor-var-type").text(object.type);

            var d3Table = d3Obj.append("table").attr("class", "nbtutor-seq-array");
            var d3IndRow = d3Table.append("tr");
            var d3ValRow = d3Table.append("tr");

            // Create sequence index numbers
            var indexes = [];
            for (var i = 0; i < object.values.length; i++) {
                indexes.push(i);
            }

            // Add an ellipsis to the end of a long sequence
            var ind = object.values.length - 1;
            if (object.options.ellipsis) {
                if (object.values[ind] === '...') {
                    indexes[ind] = "...";
                } else {
                    indexes.push("...");
                    object.values.push("...");
                }
            }

            // Add index numbers
            d3IndRow.selectAll("td").data(indexes).enter().append("td").attr("class", "nbtutor-var-index").text(function (d) {
                return d;
            });

            // Add sequence anchors
            d3ValRow.selectAll("td").data(object.values).enter().append("td").attr("class", "nbtutor-anchor-from").append("div").text(function (d) {
                return d;
            });
        }
    }, {
        key: "_createKeyValue",
        value: function _createKeyValue(object, tracestep) {
            var that = this;
            var heap_history = this.trace_history.heap_history;
            object.values.map(function (obj) {
                var key = heap_history.getObjectById(tracestep, obj.key_id);
                if (!object.options.inline_keys || key.catagory != 'primitive') {
                    obj.key_uuid = 'r-' + _nbtutorDeps.uuid.v4();
                    that._createObject(key, tracestep);
                    that.connectors.push({
                        from: obj.key_uuid,
                        to: key.uuid
                    });
                }
                var value = heap_history.getObjectById(tracestep, obj.val_id);
                if (!object.options.inline_vals || value.catagory != 'primitive') {
                    obj.val_uuid = 'r-' + _nbtutorDeps.uuid.v4();
                    that._createObject(value, tracestep);
                    that.connectors.push({
                        from: obj.val_uuid,
                        to: value.uuid
                    });
                }
            });

            var d3Obj = this._createHeapDiv(object);
            d3Obj.append("div").attr("class", "nbtutor-var-type").text(object.type);

            var d3Table = d3Obj.append("table").attr("class", "nbtutor-seq-key-value");

            // Add an ellipsis to the end of a long sequence
            var ind = object.values.length - 1;
            if (object.options.ellipsis) {
                if (object.values[ind] != '...') {
                    object.values.push("...");
                }
            }

            var d3Rows = d3Table.selectAll("tr").data(object.values).enter().append("tr");

            var d3Keys = d3Rows.append("td").attr("class", "nbtutor-anchor-from");
            var d3Vals = d3Rows.append("td").attr("class", "nbtutor-anchor-from");

            d3Keys.append("div").each(function (d) {
                if (object.options.ellipsis && d === "...") {
                    _nbtutorDeps.d3.select(this).text("...");
                } else {
                    var key = heap_history.getObjectById(tracestep, d.key_id);
                    if (object.options.inline_keys && key.catagory === 'primitive') {
                        _nbtutorDeps.d3.select(this).text(key.value);
                    } else {
                        _nbtutorDeps.d3.select(this).attr("id", function (d) {
                            return d.key_uuid;
                        });
                    }
                }
            });

            d3Vals.append("div").each(function (d) {
                if (object.options.ellipsis && d === "...") {
                    _nbtutorDeps.d3.select(this).text("...");
                } else {
                    var value = heap_history.getObjectById(tracestep, d.val_id);
                    if (object.options.inline_vals && value.catagory === 'primitive') {
                        _nbtutorDeps.d3.select(this).text(value.value);
                    } else {
                        _nbtutorDeps.d3.select(this).attr("id", function (d) {
                            return d.val_uuid;
                        });
                    }
                }
            });

            // Toggle mouse hover over ref
            d3Keys.on('mouseover', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", true);
                that._setHover(d.key_uuid, true);
            });
            d3Keys.on('mouseout', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", false);
                that._setHover(d.key_uuid, false);
            });
            d3Vals.on('mouseover', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", true);
                that._setHover(d.val_uuid, true);
            });
            d3Vals.on('mouseout', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", false);
                that._setHover(d.val_uuid, false);
            });
        }
    }, {
        key: "_createObject",
        value: function _createObject(object, tracestep) {
            if (this.objects_rendered.indexOf(object.uuid) >= 0) {
                return;
            }

            this.objects_rendered.push(object.uuid);
            switch (object.catagory) {
                case "primitive":
                    this._createPrimitive(object);
                    break;
                case "sequence":
                    this._createSequence(object, tracestep);
                    break;
                case "array":
                    this._createArray(object, tracestep);
                    break;
                case "key-value":
                    this._createKeyValue(object, tracestep);
                    break;
                default:
                    this._createPrimitive({
                        uuid: object.uuid,
                        type: object.type,
                        options: object.options,
                        value: 'OBJECT'
                    });
            }
        }
    }, {
        key: "create",
        value: function create(tracestep) {
            // First destroy any previous visualization
            this.destroy();

            // Init parent div
            this.d3Root.append("div").attr("class", "nbtutor-stack");
            this.d3Root.append("div").attr("class", "nbtutor-heap");

            var stack_history = this.trace_history.stack_history;
            var heap_history = this.trace_history.heap_history;
            var stack_frames = stack_history.getStackFrames(tracestep);

            // Create tables for each frame
            var d3Frames = this.d3Root.select(".nbtutor-stack").selectAll("div").data(stack_frames, function (d) {
                return d.uuid;
            }).enter().append("div").attr("class", "nbtutor-frame");

            d3Frames.append("table").attr("id", function (d) {
                return d.uuid;
            }).append("thead").append("tr").append("th").attr("colspan", 2).text(function (d) {
                return d.name;
            });
            d3Frames.select("table").append("tbody");
            d3Frames.select("table").append("tfoot");

            // Add names to each frame
            var d3Names = d3Frames.select("tbody").selectAll("tr").data(function (d) {
                return d.vars.map(function (v) {
                    return { object: v, options: d.options };
                });
            }, function (d) {
                return d.object.name;
            }).enter().append("tr");

            var that = this;
            d3Names.append("td").attr("class", "nbtutor-var-name").text(function (d) {
                return d.object.name;
            });

            d3Names.append("td").attr("class", "nbtutor-anchor-from").append("div").attr("id", function (d) {
                return d.object.uuid;
            }).each(function (d) {
                var object = heap_history.getObjectById(tracestep, d.object.id);
                if (d.options.inline && object.catagory === 'primitive') {
                    _nbtutorDeps.d3.select(this).text(object.value);
                } else {
                    that._createObject(object, tracestep);
                    that.connectors.push({
                        from: d.object.uuid,
                        to: object.uuid
                    });
                }
            });

            // Create connector lines
            this._connectObjects();

            // Toggle active frame
            var d3Tables = this.d3Root.select(".nbtutor-stack").selectAll("table");
            d3Tables.classed("nbtutor-active", false);
            _nbtutorDeps.d3.select(d3Tables[0].pop()).classed("nbtutor-active", true);

            // Toggle mouse hover over name
            d3Names.on('mouseover', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", true);
                that._setHover(d.object.uuid, true);
            });
            d3Names.on('mouseout', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", false);
                that._setHover(d.object.uuid, false);
            });

            (0, _nbtutorDeps.$)(window).resize(function () {
                that.jsplumb.repaintEverything();
            });
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.jsplumb.empty(this.d3Root[0]);
            this.d3Root.selectAll("div").remove();
            this.connectors = [];
            this.objects_rendered = [];
        }
    }]);

    return MemoryModelUI;
}();

},{"nbtutor-deps":"nbtutor-deps"}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TimelineUI = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-unused-vars: 0 */


var _nbtutorDeps = require("nbtutor-deps");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimelineUI = exports.TimelineUI = function () {
    function TimelineUI(stack_timeline, d3Root) {
        _classCallCheck(this, TimelineUI);

        this.stack_timeline = stack_timeline;
        this.d3Root = d3Root;
    }

    _createClass(TimelineUI, [{
        key: "create",
        value: function create() {
            // First destroy any previous visualization
            this.destroy();

            // Create trace step headings data
            var headings = ["Names"];
            for (var t = 0; t < this.stack_timeline.tracestep; t++) {
                headings.push(t);
            }

            // Create stack timeline tables for each frame
            var that = this;
            var d3Canvas = this.d3Root.append("div").attr("class", "nbtutor-timeline-canvas");

            var d3Tables = d3Canvas.selectAll("div").data(this.stack_timeline.stack_frames, function (d) {
                return d.uuid;
            }).enter().append("div").attr("class", "nbtutor-timeline").append("table").attr("id", function (d) {
                return d.uuid;
            });

            var d3Theads = d3Tables.append("thead");
            var d3Tbodys = d3Tables.append("tbody");
            var d3Tfoots = d3Tables.append("tfoot");

            // Create stace step headings
            d3Theads.append("tr").append("th").attr("colspan", this.stack_timeline.tracestep + 1).text(function (d) {
                return d.name;
            });

            d3Theads.append("tr").selectAll("th").data(headings).enter().append("th").text(function (d) {
                return d;
            });

            // Add names and values to each frame stack timeline
            var d3Rows = d3Tbodys.selectAll("tr").data(function (d) {
                return d.vars;
            }, function (d) {
                return d.name;
            }).enter().append("tr");

            d3Rows.selectAll("td").data(function (d) {
                return [d.name].concat(d.values);
            }).enter().append("td").attr("class", function (d, i) {
                return i > 0 ? "nbtutor-var-value" : "nbtutor-var-name";
            }).text(function (d) {
                return d;
            });

            // Toggle mouce hover over name
            d3Rows.on('mouseover', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", true);
            });
            d3Rows.on('mouseout', function (d) {
                _nbtutorDeps.d3.select(this).classed("nbtutor-hover", false);
            });
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.d3Root.selectAll("div").remove();
        }
    }]);

    return TimelineUI;
}();

},{"nbtutor-deps":"nbtutor-deps"}]},{},[8])(8)
});
